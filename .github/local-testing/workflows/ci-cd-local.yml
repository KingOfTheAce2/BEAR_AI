name: BEAR AI - Local CI/CD Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  LOCAL_TESTING: true
  SKIP_EXTERNAL_CALLS: true

jobs:
  # Quick validation for local testing
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          echo "🔍 Validating project configuration..."

          # Check package.json
          if [[ -f "package.json" ]]; then
            echo "✅ package.json found"
            node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" || {
              echo "❌ package.json is invalid"
              exit 1
            }
          else
            echo "❌ package.json not found"
            exit 1
          fi

          # Check Cargo.toml
          if [[ -f "src-tauri/Cargo.toml" ]]; then
            echo "✅ Cargo.toml found"
          else
            echo "❌ Cargo.toml not found"
            exit 1
          fi

          # Check workflow files
          echo "📁 Workflow files:"
          ls -la .github/workflows/

          echo "🎯 Pre-flight checks completed successfully"

  # Optimized quality checks for local testing
  quality-checks-local:
    name: Quality Checks (Local)
    needs: [pre-flight]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            node_modules/
          key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies (with retry)
        run: |
          echo "📦 Installing dependencies..."
          npm ci --prefer-offline --no-audit || {
            echo "⚠️  npm ci failed, trying fallback strategies..."
            npm cache clean --force
            npm ci --prefer-offline --no-audit || {
              echo "⚠️  Trying npm install..."
              npm install --no-audit
            }
          }

      - name: TypeScript type checking
        run: |
          echo "🔍 Running TypeScript checks..."
          npm run typecheck

      - name: ESLint (with error tolerance for local testing)
        run: |
          echo "🔍 Running ESLint..."
          npm run lint || {
            echo "⚠️  ESLint found issues, but continuing for local testing"
            echo "Please fix these issues before production deployment"
          }

      - name: Rust formatting check
        working-directory: src-tauri
        run: |
          echo "🦀 Checking Rust formatting..."
          cargo fmt --all -- --check || {
            echo "⚠️  Rust formatting issues found"
            echo "Run 'cargo fmt' to fix formatting"
          }

      - name: Rust linting
        working-directory: src-tauri
        run: |
          echo "🦀 Running Rust linting..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Build validation (quick mode)
        run: |
          echo "🏗️  Building for validation..."
          npm run build:alpha-fast || echo "⚠️  Build issues found - review before production"

      - name: Rust compilation check
        working-directory: src-tauri
        run: |
          echo "🦀 Checking Rust compilation..."
          cargo check --release --all-targets

  # Single platform build for faster local testing
  build-local:
    name: Local Build Test
    needs: [quality-checks-local]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          echo "🔧 Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            librsvg2-dev \
            libayatana-appindicator3-dev \
            libxdo-dev

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            node_modules/
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

      - name: Install frontend dependencies
        run: |
          echo "📦 Installing frontend dependencies..."
          npm ci --prefer-offline --no-audit

      - name: Build frontend
        run: |
          echo "🏗️  Building frontend..."
          npm run build

      - name: Build Tauri app (debug mode for speed)
        run: |
          echo "🏗️  Building Tauri application..."
          cd src-tauri
          cargo build --features custom-protocol

      - name: Validate build artifacts
        run: |
          echo "🔍 Validating build artifacts..."

          # Check frontend build
          if [[ -d "build" ]]; then
            echo "✅ Frontend build directory exists"
            echo "📊 Build size: $(du -sh build | cut -f1)"
          else
            echo "❌ Frontend build failed"
            exit 1
          fi

          # Check Rust binary
          if [[ -f "src-tauri/target/debug/bear-ai-legal-assistant" ]] || [[ -f "src-tauri/target/debug/bear-ai-legal-assistant.exe" ]]; then
            echo "✅ Rust binary built successfully"
          else
            echo "❌ Rust binary build failed"
            exit 1
          fi

          echo "🎉 Local build test completed successfully!"

  # Generate local testing report
  test-report:
    name: Generate Test Report
    needs: [build-local]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "# 🐻 BEAR AI Local Testing Report" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** Local Testing Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job status checks
          if [[ "${{ needs.build-local.result }}" == "success" ]]; then
            echo "✅ **Build Test:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Test:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Run full multi-platform testing with: \`act -j build-tauri\`" >> $GITHUB_STEP_SUMMARY
          echo "- Test release workflow with: \`act -j release\`" >> $GITHUB_STEP_SUMMARY
          echo "- Check performance metrics in: \`.github/local-testing/metrics/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Local testing completed successfully!**" >> $GITHUB_STEP_SUMMARY