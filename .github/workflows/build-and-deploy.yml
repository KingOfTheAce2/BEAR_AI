name: 'Build and Deploy BEAR AI'

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  test:
    name: 'Test and Lint'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type checker
        run: npm run typecheck

      - name: Run tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build-web:
    name: 'Build Web Application'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: npm run build

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/
          retention-days: 7

  build-desktop:
    name: 'Build Desktop App'
    needs: test
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-20.04, macos-latest]
        include:
          - platform: windows-latest
            rust-target: x86_64-pc-windows-msvc
            artifact-name: windows-x86_64
            artifact-path: 'src-tauri/target/release/bundle'
          - platform: ubuntu-20.04
            rust-target: x86_64-unknown-linux-gnu
            artifact-name: linux-x86_64
            artifact-path: 'src-tauri/target/release/bundle'
          - platform: macos-latest
            rust-target: x86_64-apple-darwin
            artifact-name: macos-x86_64
            artifact-path: 'src-tauri/target/release/bundle'

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libwebkit2gtk-4.0-dev \
            webkit2gtk-4.0 \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install app dependencies
        run: npm ci

      - name: Generate Tauri icons (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          # Copy the main logo to Tauri icons directory
          mkdir -p src-tauri/icons
          # You would typically use tauri icon command here
          # For now, we'll create placeholder icons
          
      - name: Build Tauri app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run tauri build -- --target ${{ matrix.rust-target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          retention-days: 7

  build-installer-windows:
    name: 'Build Windows Installer'
    needs: build-desktop
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-x86_64
          path: windows-build/

      - name: Setup Advanced Installer
        run: |
          # Download and install Advanced Installer
          Invoke-WebRequest -Uri "https://www.advancedinstaller.com/downloads/advinst.msi" -OutFile "advinst.msi"
          Start-Process msiexec.exe -Wait -ArgumentList '/I advinst.msi /quiet'

      - name: Create Windows Installer
        run: |
          # Create advanced installer project programmatically
          $aiProject = @"
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <DOCUMENT Type="Advanced Installer" CreateVersion="19.8" version="19.8" Modules="professional" RootPath="." Language="en" Id="{PRODUCT-ID}">
            <COMPONENT cid="caphyon.advinst.msicomp.ProjectOptionsComponent">
              <ROW Name="HiddenItems" Value="AppXProductDetailsComponent;AppXDependenciesComponent;AppXAppDetailsComponent;AppXVisualAssetsComponent;AppXCapabilitiesComponent;AppXAppDeclarationsComponent;AppXPackagingComponent"/>
            </COMPONENT>
            <COMPONENT cid="caphyon.advinst.msicomp.MsiPropsComponent">
              <ROW Property="ProductCode" Value="1033:{PRODUCT-CODE}" Type="16" Order="0"/>
              <ROW Property="ProductName" Value="1033:BEAR AI Legal Assistant" ValueLocId="*" Type="25" Order="1"/>
              <ROW Property="ProductVersion" Value="1.0.0" Type="32" Order="2"/>
              <ROW Property="Manufacturer" Value="1033:BEAR AI Team" ValueLocId="*" Type="25" Order="3"/>
            </COMPONENT>
          </DOCUMENT>
          "@
          $aiProject | Out-File -FilePath "bear-ai-installer.aip" -Encoding UTF8
          
          # Build installer using Advanced Installer CLI
          & "C:\Program Files (x86)\Caphyon\Advanced Installer 19.8\bin\x86\AdvancedInstaller.exe" /build "bear-ai-installer.aip"

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: "*.msi"
          retention-days: 30

  release:
    name: 'Create Release'
    needs: [build-web, build-desktop, build-installer-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog (you can customize this)
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "Full release notes available at: https://github.com/${{ github.repository }}/releases/tag/v$VERSION" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: 'BEAR AI Legal Assistant v${{ steps.changelog.outputs.version }}'
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          files: |
            windows-x86_64/**/*
            linux-x86_64/**/*
            macos-x86_64/**/*
            windows-installer/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-web:
    name: 'Deploy Web Application'
    needs: [test, build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: dist/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: bearai.legal # Replace with your custom domain if available

  notification:
    name: 'Notification'
    needs: [test, build-web, build-desktop]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.build-web.result == 'success' && needs.build-desktop.result == 'success' }}
        run: |
          echo "✅ Build completed successfully!"
          echo "- Tests: ✅"
          echo "- Web Build: ✅"
          echo "- Desktop Build: ✅"

      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.build-web.result == 'failure' || needs.build-desktop.result == 'failure' }}
        run: |
          echo "❌ Build failed!"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Web Build: ${{ needs.build-web.result }}"
          echo "- Desktop Build: ${{ needs.build-desktop.result }}"
          exit 1