name: Cache Cleanup

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  cleanup:
    name: Clean Up Caches
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Cleanup old caches
        run: |
          echo "🧹 Starting cache cleanup process..."

          # Get list of caches
          gh cache list --limit 100 --json id,key,createdAt --jq '.[] | select(.createdAt < (now - 604800)) | .id' > old_cache_ids.txt

          # Delete old caches (older than 7 days)
          while read -r cache_id; do
            if [ ! -z "$cache_id" ]; then
              echo "Deleting cache ID: $cache_id"
              gh cache delete "$cache_id" || echo "Failed to delete cache $cache_id"
            fi
          done < old_cache_ids.txt

          # Clean up Rust target directories in cache
          echo "🦀 Cleaning up Rust caches..."
          gh cache list --key "rust-cache-" --limit 50 --json id,key,createdAt --jq '.[] | select(.createdAt < (now - 259200)) | .id' > rust_cache_ids.txt

          while read -r cache_id; do
            if [ ! -z "$cache_id" ]; then
              echo "Deleting Rust cache ID: $cache_id"
              gh cache delete "$cache_id" || echo "Failed to delete Rust cache $cache_id"
            fi
          done < rust_cache_ids.txt

          echo "✅ Cache cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-artifacts:
    name: Clean Up Artifacts
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "🗂️ Starting artifact cleanup process..."

          # Delete artifacts older than 30 days
          artifact_ids=$(gh api repos/${{ github.repository }}/actions/artifacts --paginate --jq '.artifacts[] | select(.created_at < (now - 2592000 | strftime("%Y-%m-%dT%H:%M:%SZ"))) | .id')

          for artifact_id in $artifact_ids; do
            echo "Deleting artifact ID: $artifact_id"
            gh api repos/${{ github.repository }}/actions/artifacts/$artifact_id -X DELETE || echo "Failed to delete artifact $artifact_id"
          done

          echo "✅ Artifact cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  report:
    name: Cleanup Report
    runs-on: ubuntu-latest
    needs: [cleanup, cleanup-artifacts]
    if: always()
    steps:
      - name: Generate cleanup report
        run: |
          echo "📊 Cache and Artifact Cleanup Report" >> $GITHUB_STEP_SUMMARY
          echo "=================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.cleanup.result }}" == "success" ]]; then
            echo "✅ **Cache cleanup:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Cache cleanup:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.cleanup-artifacts.result }}" == "success" ]]; then
            echo "✅ **Artifact cleanup:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Artifact cleanup:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current Cache Status" >> $GITHUB_STEP_SUMMARY
          gh cache list --limit 10 --json key,sizeInBytes,createdAt | jq -r '.[] | "- **\(.key)** (\(.sizeInBytes / 1024 / 1024 | floor)MB) - Created: \(.createdAt)"' >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}