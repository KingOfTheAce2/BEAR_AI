name: Production Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    env:
      CI: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript checks
        run: npm run typecheck

      - name: Run frontend unit tests
        run: npm run test:frontend

      - name: Run end-to-end tests
        run: npm run test:e2e

      - name: Run Rust test suite
        working-directory: src-tauri
        run: cargo test --all --locked

  build-release:
    name: Build Release Artifacts
    needs: quality-gates
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: macos
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            artifact: linux
    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install npm dependencies
        run: npm ci --no-audit

      - name: Build web application
        run: npm run build

      - name: Build Tauri bundle
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri:build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}-release
          path: src-tauri/target/**/bundle
          retention-days: 30

  create-release:
    name: Publish GitHub Release
    needs: build-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine release tag
        id: release_meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure tag exists for manual release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const version = `${{ github.event.inputs.version }}`.trim();
            if (!version) {
              core.setFailed('Release version input is required when dispatching manually.');
              return;
            }
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`
              });
            } catch (error) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`,
                sha: context.sha
              });
            }

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          name: BEAR AI Legal Assistant ${{ steps.release_meta.outputs.tag }}
          generate_release_notes: true
          files: |
            artifacts/**/*
          draft: false
          prerelease: ${{ contains(steps.release_meta.outputs.tag, 'alpha') || contains(steps.release_meta.outputs.tag, 'beta') }}
