name: Production Release (Optimized)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release tag (e.g., v1.2.3)'
        required: true
        type: string
      skip_quality_gates:
        description: 'Skip quality gates for emergency releases'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SKIP_PREFLIGHT_CHECK: true
  GENERATE_SOURCEMAP: false
  TSC_COMPILE_ON_ERROR: true

jobs:
  quality-gates:
    name: Quality Gates (Optional)
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_quality_gates != 'true'
    env:
      CI: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache dependencies (optimized)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            node_modules/
            ~/.npm
          key: ${{ runner.os }}-prod-fast-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-prod-fast-
            ${{ runner.os }}-quality-
            ${{ runner.os }}-

      - name: Install dependencies (fast)
        run: |
          npm config set registry https://registry.npmjs.org/
          npm ci --prefer-offline --no-audit --ignore-scripts || npm install --no-audit --force --legacy-peer-deps

      - name: Run TypeScript checks (alpha)
        run: npm run typecheck:alpha

      - name: Build frontend validation (fastest)
        run: npm run build:alpha-fast

  build-release:
    name: Build Release Artifacts (Parallel)
    needs: []
    if: always() && (needs.quality-gates.result == 'success' || needs.quality-gates.result == 'skipped' || github.event.inputs.skip_quality_gates == 'true')
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        platform:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: windows
            cache_key: windows-prod
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: macos
            cache_key: macos-prod
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            artifact: linux
            cache_key: linux-prod
    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (cached)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup Rust toolchain (cached)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache platform dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
            node_modules/
            ~/.npm
          key: ${{ runner.os }}-${{ matrix.platform.cache_key }}-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.cache_key }}-
            ${{ runner.os }}-prod-fast-
            ${{ runner.os }}-

      - name: Install Linux dependencies (parallel)
        if: matrix.platform.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install npm dependencies (optimized)
        run: |
          npm config set registry https://registry.npmjs.org/
          npm ci --prefer-offline --no-audit --ignore-scripts || npm install --no-audit --force --legacy-peer-deps

      - name: Build web application (fastest)
        run: npm run build:alpha-fast

      - name: Build Tauri bundle (fast profile)
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri:build:alpha-fast

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}-release
          path: src-tauri/target/**/bundle
          retention-days: 30

  create-release:
    name: Publish GitHub Release (Fast)
    needs: build-release
    runs-on: ubuntu-latest
    if: always() && needs.build-release.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine release tag
        id: release_meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure tag exists for manual release
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const version = `${{ github.event.inputs.version }}`.trim();
            if (!version) {
              core.setFailed('Release version input is required when dispatching manually.');
              return;
            }
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`
              });
            } catch (error) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${version}`,
                sha: context.sha
              });
            }

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          name: BEAR AI Legal Assistant ${{ steps.release_meta.outputs.tag }}
          generate_release_notes: true
          files: |
            artifacts/**/*
          draft: false
          prerelease: ${{ contains(steps.release_meta.outputs.tag, 'alpha') || contains(steps.release_meta.outputs.tag, 'beta') }}
