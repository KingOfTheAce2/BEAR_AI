name: Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    # Code Quality Checks
    - name: Run ESLint with detailed output
      run: |
        npx eslint . --ext .ts,.tsx --format json --output-file eslint-report.json || true
        npx eslint . --ext .ts,.tsx --format stylish
    
    - name: Type checking
      run: npm run typecheck
    
    # Test Coverage Requirements
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Check coverage thresholds
      run: |
        npm run test:ci
        # Additional coverage checks can be added here
    
    # Performance Budget Checks
    - name: Build and analyze bundle
      run: |
        npm run build
        npx webpack-bundle-analyzer dist/assets/*.js --analyzer-mode json --report bundle-analysis.json || true
    
    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(du -sk dist | cut -f1)
        echo "Bundle size: ${BUNDLE_SIZE}KB"
        if [ $BUNDLE_SIZE -gt 2048 ]; then
          echo "❌ Bundle size exceeds 2MB limit"
          exit 1
        else
          echo "✅ Bundle size within limits"
        fi
    
    # Accessibility Requirements
    - name: Run accessibility tests
      run: npm run test:a11y
    
    # Security Checks
    - name: Security audit
      run: |
        npm audit --audit-level=high --json > security-audit.json || true
        npm audit --audit-level=high
    
    - name: Check for sensitive files
      run: |
        if find . -name "*.pem" -o -name "*.key" -o -name "*.env" -o -name "*.secret" | grep -q .; then
          echo "❌ Sensitive files detected"
          find . -name "*.pem" -o -name "*.key" -o -name "*.env" -o -name "*.secret"
          exit 1
        else
          echo "✅ No sensitive files detected"
        fi
    
    # Code Complexity Analysis
    - name: Analyze code complexity
      run: |
        npx plato -r -d complexity-report src/
        # Add complexity threshold checks here
    
    # Dependency Analysis
    - name: Check for duplicate dependencies
      run: |
        npx duplicate-package-checker-webpack-plugin --show-help || true
    
    # Generate Quality Report
    - name: Generate quality report
      run: |
        cat > quality-report.md << EOF
        # Quality Gate Report
        
        ## ✅ Passed Checks
        - TypeScript compilation
        - ESLint rules
        - Test coverage thresholds
        - Bundle size limits
        - Accessibility standards
        - Security audit
        
        ## 📊 Metrics
        - Bundle size: \$(du -sk dist | cut -f1)KB
        - Test coverage: Check coverage report
        - Security vulnerabilities: Check audit report
        
        ## 📋 Next Steps
        - Review any warnings in the detailed reports
        - Ensure all tests pass in CI
        - Verify performance benchmarks
        EOF
    
    # Upload Reports
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          eslint-report.json
          bundle-analysis.json
          security-audit.json
          complexity-report/
          quality-report.md
    
    # Comment on PR
    - name: Comment quality report on PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let qualityReport = '';
          try {
            qualityReport = fs.readFileSync('quality-report.md', 'utf8');
          } catch (error) {
            qualityReport = '# Quality Gate Report\n\nReport generation failed. Check workflow logs.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: qualityReport
          });

  # Deployment Readiness Check
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Production build test
      run: |
        export NODE_ENV=production
        npm run build
    
    - name: Start production server test
      run: |
        npm run preview &
        SERVER_PID=$!
        sleep 10
        
        # Test if server is responding
        curl -f http://localhost:4173 || exit 1
        
        # Cleanup
        kill $SERVER_PID
    
    - name: Docker build test (if Dockerfile exists)
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t bear-ai-test .
          echo "✅ Docker build successful"
        else
          echo "ℹ️ No Dockerfile found, skipping Docker build test"
        fi
    
    - name: Generate deployment checklist
      run: |
        cat > deployment-checklist.md << EOF
        # Deployment Readiness Checklist
        
        ## ✅ Quality Gates Passed
        - [x] All tests passing
        - [x] Code quality standards met
        - [x] Security audit clean
        - [x] Bundle size within limits
        - [x] Production build successful
        
        ## 🚀 Ready for Deployment
        This PR meets all quality requirements and is ready for deployment.
        
        ## 📋 Post-Deployment Tasks
        - [ ] Verify application starts correctly
        - [ ] Run smoke tests in production
        - [ ] Monitor error rates and performance
        - [ ] Update documentation if needed
        EOF
    
    - name: Upload deployment checklist
      uses: actions/upload-artifact@v3
      with:
        name: deployment-checklist
        path: deployment-checklist.md