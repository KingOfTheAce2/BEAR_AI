name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm config set registry https://registry.npmjs.org/
        if npm ci --legacy-peer-deps; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed, falling back to npm install"
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps
        fi

    - name: Security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -v '^0$'; then
          echo "High severity vulnerabilities found!"
          exit 1
        fi

  build-release:
    needs: security-audit
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bundle: msi
          - name: macOS
            os: macos-latest
            target: x86_64-apple-darwin
            bundle: dmg
          - name: Linux
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bundle: deb

    runs-on: ${{ matrix.platform.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.platform.target }}

    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
          node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}

    - name: Install dependencies
      shell: bash
      run: |
        npm config set registry https://registry.npmjs.org/
        if npm ci --legacy-peer-deps; then
          echo "npm ci succeeded"
        else
          echo "npm ci failed, falling back to npm install"
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps
        fi

    - name: Build frontend
      run: npm run build

    - name: Build Tauri app
      run: npm run tauri:build
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform.name }}-release
        path: src-tauri/target/release/bundle/
        retention-days: 30

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/*
        draft: false
        prerelease: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
        generate_release_notes: true
        body: |
          ## BEAR AI Legal Assistant ${{ github.ref_name }}

          ### Features
          - Enhanced Stripe Integration v2 with enterprise billing
          - Advanced OCR document processing with batch capabilities
          - Comprehensive AI model management system
          - Hardware detection and performance optimization
          - Security and compliance features (PII detection, GDPR)
          - Cross-platform desktop application support

          ### Downloads
          - **Windows**: `.msi` installer
          - **macOS**: `.dmg` installer
          - **Linux**: `.deb` package

          ### Installation
          Download the appropriate installer for your platform and follow the installation instructions.

          ðŸ”’ All releases are signed and verified for security.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}