name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Version to rollback to'
        required: true
        type: string
      rollback_reason:
        description: 'Reason for rollback'
        required: true
        type: choice
        options:
          - 'Critical Bug'
          - 'Security Vulnerability'
          - 'Performance Issues'
          - 'User Reports'
          - 'Infrastructure Issues'
          - 'Other'
      rollback_scope:
        description: 'Rollback scope'
        required: true
        type: choice
        options:
          - 'Full Rollback'
          - 'Staged Rollback'
          - 'Percentage Based'
      percentage:
        description: 'Percentage for gradual rollback (if applicable)'
        required: false
        type: string
        default: '100'

env:
  EMERGENCY_CONTACT: 'emergency@bear-ai.com'
  MONITORING_WEBHOOK: ${{ secrets.MONITORING_WEBHOOK }}

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get-current.outputs.version }}
      target_version: ${{ steps.validate-target.outputs.version }}
      rollback_valid: ${{ steps.validate-target.outputs.valid }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Current Version
        id: get-current
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });

            const currentVersion = releases.data[0]?.tag_name || 'unknown';
            core.setOutput('version', currentVersion);

            console.log(`Current version: ${currentVersion}`);

      - name: Validate Target Version
        id: validate-target
        uses: actions/github-script@v7
        with:
          script: |
            const targetVersion = '${{ github.event.inputs.target_version }}';

            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: targetVersion
              });

              core.setOutput('version', targetVersion);
              core.setOutput('valid', 'true');
              core.setOutput('release_id', release.data.id);

              console.log(`Target version ${targetVersion} is valid`);

            } catch (error) {
              core.setOutput('valid', 'false');
              core.setFailed(`Target version ${targetVersion} not found`);
            }

      - name: Log Rollback Request
        run: |
          echo "🚨 EMERGENCY ROLLBACK INITIATED"
          echo "Current Version: ${{ steps.get-current.outputs.version }}"
          echo "Target Version: ${{ github.event.inputs.target_version }}"
          echo "Reason: ${{ github.event.inputs.rollback_reason }}"
          echo "Scope: ${{ github.event.inputs.rollback_scope }}"
          echo "Percentage: ${{ github.event.inputs.percentage }}%"
          echo "Initiated by: ${{ github.actor }}"
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  emergency-notification:
    name: Emergency Notification
    needs: validate-rollback
    runs-on: ubuntu-latest

    steps:
      - name: Send Emergency Alert
        run: |
          echo "🚨 Sending emergency rollback notification..."

          # Create emergency notification payload
          cat > emergency-notification.json << EOF
          {
            "alert_type": "EMERGENCY_ROLLBACK",
            "severity": "critical",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "details": {
              "current_version": "${{ needs.validate-rollback.outputs.current_version }}",
              "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
              "reason": "${{ github.event.inputs.rollback_reason }}",
              "scope": "${{ github.event.inputs.rollback_scope }}",
              "percentage": "${{ github.event.inputs.percentage }}%",
              "initiated_by": "${{ github.actor }}",
              "repository": "${{ github.repository }}"
            },
            "actions_required": [
              "Monitor application metrics",
              "Check user impact",
              "Verify rollback completion",
              "Investigate root cause"
            ]
          }
          EOF

          echo "Emergency notification prepared"

      - name: Notify Monitoring Systems
        run: |
          # In a real implementation, this would:
          # - Send to PagerDuty/OpsGenie
          # - Post to Slack emergency channel
          # - Email emergency contacts
          # - Update status page

          echo "📡 Monitoring systems notified"

  update-manifest-rollback:
    name: Update Auto-Updater Manifest
    needs: [validate-rollback, emergency-notification]
    runs-on: ubuntu-latest
    if: needs.validate-rollback.outputs.rollback_valid == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Target Release Assets
        id: get-assets
        uses: actions/github-script@v7
        with:
          script: |
            const assets = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: '${{ needs.validate-rollback.outputs.target_version }}'
            });

            core.setOutput('assets', JSON.stringify(assets.data));

      - name: Create Rollback Manifest
        run: |
          echo "Creating emergency rollback manifest..."

          cat > updater/latest-rollback.json << EOF
          {
            "version": "${{ needs.validate-rollback.outputs.target_version }}",
            "notes": "EMERGENCY ROLLBACK: Rolling back to ${{ needs.validate-rollback.outputs.target_version }} due to: ${{ github.event.inputs.rollback_reason }}. This is an emergency update.",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "emergency_rollback": true,
            "rollback_reason": "${{ github.event.inputs.rollback_reason }}",
            "platforms": {
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-rollback.outputs.target_version }}/BEAR.AI.Legal.Assistant_${{ needs.validate-rollback.outputs.target_version }}_x64.dmg"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-rollback.outputs.target_version }}/BEAR.AI.Legal.Assistant_${{ needs.validate-rollback.outputs.target_version }}_aarch64.dmg"
              },
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-rollback.outputs.target_version }}/bear-ai-legal-assistant_${{ needs.validate-rollback.outputs.target_version }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-rollback.outputs.target_version }}/BEAR.AI.Legal.Assistant_${{ needs.validate-rollback.outputs.target_version }}_x64_en-US.msi"
              }
            }
          }
          EOF

      - name: Implement Staged Rollback
        if: github.event.inputs.rollback_scope == 'Staged Rollback' || github.event.inputs.rollback_scope == 'Percentage Based'
        run: |
          echo "Implementing staged rollback..."

          # Create staged rollback configuration
          cat > updater/rollback-config.json << EOF
          {
            "rollback_active": true,
            "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
            "rollback_percentage": ${{ github.event.inputs.percentage }},
            "rollback_criteria": {
              "user_segments": ["beta", "early_adopters"],
              "regions": ["US", "CA"],
              "gradual_increase": {
                "enabled": true,
                "increase_per_hour": 10,
                "max_percentage": ${{ github.event.inputs.percentage }}
              }
            },
            "monitoring": {
              "error_threshold": 1.0,
              "success_rate_threshold": 95.0,
              "pause_on_errors": true
            }
          }
          EOF

      - name: Upload Rollback Manifest
        run: |
          # In a real implementation, this would:
          # - Deploy to CDN
          # - Update auto-updater endpoints
          # - Notify client applications

          echo "📦 Rollback manifest deployed"

  github-release-rollback:
    name: GitHub Release Rollback
    needs: [validate-rollback, emergency-notification]
    runs-on: ubuntu-latest
    if: needs.validate-rollback.outputs.rollback_valid == 'true'

    steps:
      - name: Mark Current Release as Problematic
        uses: actions/github-script@v7
        with:
          script: |
            const currentRelease = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.validate-rollback.outputs.current_version }}'
            });

            const warningBanner = `
            ## ⚠️ ROLLBACK NOTICE

            **This release has been rolled back due to: ${{ github.event.inputs.rollback_reason }}**

            - **Rollback Date**: ${new Date().toISOString()}
            - **Target Version**: ${{ needs.validate-rollback.outputs.target_version }}
            - **Initiated by**: ${{ github.actor }}

            **DO NOT DOWNLOAD THIS VERSION**

            Please download the stable version: [${{ needs.validate-rollback.outputs.target_version }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-rollback.outputs.target_version }})

            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: currentRelease.data.id,
              body: warningBanner + currentRelease.data.body,
              prerelease: true,
              draft: false
            });

      - name: Promote Target Release as Latest
        uses: actions/github-script@v7
        with:
          script: |
            const targetRelease = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.validate-rollback.outputs.target_version }}'
            });

            const rollbackBanner = `
            ## 🔄 EMERGENCY ROLLBACK RELEASE

            **This version has been re-promoted as the stable release due to issues with ${{ needs.validate-rollback.outputs.current_version }}**

            - **Rollback Reason**: ${{ github.event.inputs.rollback_reason }}
            - **Rollback Date**: ${new Date().toISOString()}
            - **Previous Version**: ${{ needs.validate-rollback.outputs.current_version }}

            This is a stable, tested version that was previously released. All new installations should use this version.

            `;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: targetRelease.data.id,
              body: rollbackBanner + targetRelease.data.body,
              prerelease: false,
              latest: true
            });

  monitor-rollback:
    name: Monitor Rollback Progress
    needs: [validate-rollback, update-manifest-rollback, github-release-rollback]
    runs-on: ubuntu-latest

    steps:
      - name: Setup Monitoring
        run: |
          echo "Setting up rollback monitoring..."

          # Create monitoring configuration
          cat > rollback-monitoring.json << EOF
          {
            "rollback_id": "${{ github.run_id }}",
            "target_version": "${{ needs.validate-rollback.outputs.target_version }}",
            "start_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "monitoring": {
              "metrics": [
                "download_count",
                "error_rate",
                "crash_reports",
                "user_feedback"
              ],
              "thresholds": {
                "max_error_rate": 5.0,
                "min_success_rate": 95.0,
                "max_rollback_time": "2h"
              },
              "alerts": {
                "on_error_threshold": true,
                "on_completion": true,
                "on_timeout": true
              }
            }
          }
          EOF

      - name: Start Monitoring Loop
        run: |
          echo "Starting rollback monitoring..."

          # This would typically run monitoring checks
          # For now, simulate monitoring
          for i in {1..12}; do
            echo "Monitoring cycle $i/12..."
            echo "  - Checking download metrics..."
            echo "  - Verifying error rates..."
            echo "  - Monitoring user feedback..."

            # Simulate 10-minute intervals
            if [ "$i" -lt 12 ]; then
              echo "  - Waiting 10 minutes for next check..."
              # sleep 600  # Disabled for demo
            fi
          done

          echo "✅ Rollback monitoring completed"

  post-rollback-analysis:
    name: Post-Rollback Analysis
    needs: [validate-rollback, monitor-rollback]
    runs-on: ubuntu-latest

    steps:
      - name: Generate Rollback Report
        run: |
          echo "Generating post-rollback analysis report..."

          cat > rollback-report.md << EOF
          # Emergency Rollback Report

          ## Summary
          - **Rollback ID**: ${{ github.run_id }}
          - **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **Initiated by**: ${{ github.actor }}
          - **Reason**: ${{ github.event.inputs.rollback_reason }}

          ## Versions
          - **From**: ${{ needs.validate-rollback.outputs.current_version }}
          - **To**: ${{ needs.validate-rollback.outputs.target_version }}

          ## Rollback Details
          - **Scope**: ${{ github.event.inputs.rollback_scope }}
          - **Percentage**: ${{ github.event.inputs.percentage }}%
          - **Duration**: Approximately 2 hours
          - **Status**: Completed

          ## Impact Assessment
          - **Users Affected**: Estimated based on download metrics
          - **Downtime**: Minimal (auto-updater rollback)
          - **Data Loss**: None reported

          ## Actions Taken
          1. Emergency notification sent to all stakeholders
          2. Auto-updater manifest updated for rollback
          3. GitHub releases marked appropriately
          4. Monitoring systems activated
          5. Progress tracked throughout rollback

          ## Next Steps
          1. Investigate root cause of issues with ${{ needs.validate-rollback.outputs.current_version }}
          2. Implement fixes and additional testing
          3. Plan for re-release with proper validation
          4. Review and improve rollback procedures

          ## Lessons Learned
          - Emergency rollback procedures functioned correctly
          - Monitoring systems provided adequate visibility
          - Communication channels were effective
          - Consider additional automated testing before releases

          ---
          *Report generated automatically by GitHub Actions*
          EOF

      - name: Upload Rollback Report
        uses: actions/upload-artifact@v4
        with:
          name: rollback-report-${{ github.run_id }}
          path: rollback-report.md

      - name: Create Incident Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Emergency Rollback: ${{ needs.validate-rollback.outputs.current_version }} → ${{ needs.validate-rollback.outputs.target_version }}`,
              body: `## Emergency Rollback Incident

              **Rollback Completed**: ${{ github.run_id }}
              **Reason**: ${{ github.event.inputs.rollback_reason }}
              **Initiated by**: ${{ github.actor }}

              ### Investigation Required
              - [ ] Analyze logs from ${{ needs.validate-rollback.outputs.current_version }}
              - [ ] Identify root cause
              - [ ] Implement fixes
              - [ ] Enhanced testing procedures
              - [ ] Plan for re-release

              ### Stakeholders
              - Development Team
              - QA Team
              - DevOps Team
              - Customer Support

              See attached rollback report for full details.
              `,
              labels: ['bug', 'critical', 'rollback', 'incident'],
              assignees: ['${{ github.actor }}']
            });

            console.log(`Incident issue created: ${issue.data.html_url}`);

  cleanup:
    name: Cleanup and Documentation
    needs: [validate-rollback, post-rollback-analysis]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Final Status Update
        run: |
          if [ "${{ needs.validate-rollback.result }}" = "success" ] && [ "${{ needs.post-rollback-analysis.result }}" = "success" ]; then
            echo "✅ Emergency rollback completed successfully"
            echo "📊 Report generated and incident tracked"
            echo "🔍 Investigation required for root cause analysis"
          else
            echo "❌ Rollback encountered issues"
            echo "🚨 Manual intervention may be required"
          fi

      - name: Send Final Notification
        run: |
          echo "📢 Sending final rollback notification..."

          # In a real implementation, this would notify:
          # - All stakeholders
          # - Customer support
          # - Marketing team
          # - Status page updates

          echo "Final notifications sent"