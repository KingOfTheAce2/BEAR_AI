name: Security Audit & Vulnerability Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install dependencies
        run: npm ci

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Install additional security tools
        run: |
          cargo install cargo-geiger
          cargo install cargo-outdated
          npm install -g audit-ci retire

      - name: Run npm audit
        run: |
          echo "## NPM Security Audit" >> security-report.md
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit.json || true

      - name: Run cargo audit
        run: |
          echo "## Cargo Security Audit" >> security-report.md
          cd src-tauri
          cargo audit --json > ../cargo-audit.json || true
          cargo audit || true

      - name: Run cargo deny
        run: |
          echo "## Cargo Deny Check" >> security-report.md
          cd src-tauri
          cargo deny check advisories || true
          cargo deny check licenses || true
          cargo deny check sources || true

      - name: Run cargo clippy for security lints
        run: |
          echo "## Cargo Clippy Security Lints" >> security-report.md
          cd src-tauri
          cargo clippy -- -W clippy::all -W clippy::pedantic -W clippy::cargo -D warnings || true

      - name: Check for unsafe code
        run: |
          echo "## Unsafe Code Analysis" >> security-report.md
          cd src-tauri
          cargo geiger --format GitHubMarkdown >> ../security-report.md || true

      - name: Check for outdated dependencies
        run: |
          echo "## Outdated Dependencies" >> security-report.md
          cd src-tauri
          cargo outdated --format json > ../cargo-outdated.json || true
          echo "### Rust Dependencies" >> ../security-report.md
          cargo outdated || true
          cd ..
          echo "### Node.js Dependencies" >> security-report.md
          npm outdated || true

      - name: Retire.js vulnerability scan
        run: |
          echo "## JavaScript Vulnerability Scan (Retire.js)" >> security-report.md
          retire --js --json > retire-scan.json || true
          retire --js || true

      - name: Check for secrets in code
        run: |
          echo "## Secret Detection" >> security-report.md
          # Check for common secret patterns
          grep -r -E "(?i)(password|secret|key|token|api_key)" --include="*.js" --include="*.ts" --include="*.tsx" --include="*.rs" --exclude-dir=node_modules --exclude-dir=target . || echo "No secrets detected"

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.md
            npm-audit.json
            cargo-audit.json
            cargo-outdated.json
            retire-scan.json

      - name: Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = '## ðŸ”’ Security Audit Report\n\n';

            try {
              const securityReport = fs.readFileSync('security-report.md', 'utf8');
              report += securityReport;
            } catch (error) {
              report += 'Security report generation failed. Please check the workflow logs.\n';
            }

            // Truncate report if too long for comment
            if (report.length > 60000) {
              report = report.substring(0, 60000) + '\n\n... (truncated)\n\nFull report available in workflow artifacts.';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Verify package-lock.json
        run: |
          npm ci --package-lock-only
          git diff --exit-code package-lock.json || (echo "package-lock.json is not up to date" && exit 1)

      - name: Check for malicious packages
        run: |
          # Check npm packages for known malicious patterns
          npm list --all --json > package-tree.json
          # This is a basic check - in production, integrate with specialized tools

      - name: Verify Cargo.lock
        run: |
          cd src-tauri
          cargo generate-lockfile
          git diff --exit-code Cargo.lock || (echo "Cargo.lock is not up to date" && exit 1)

      - name: SBOM Generation
        run: |
          # Generate Software Bill of Materials
          echo "## Software Bill of Materials (SBOM)" > SBOM.md
          echo "### Node.js Dependencies" >> SBOM.md
          npm list --all >> SBOM.md || true
          echo "### Rust Dependencies" >> SBOM.md
          cd src-tauri && cargo tree >> ../SBOM.md || true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: |
            SBOM.md
            package-tree.json

  security-scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif