name: Trivy Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trivy-scan:
    name: Trivy Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit || npm install --force
        continue-on-error: false

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          skip-dirs: 'node_modules,dist,build,target'
          skip-files: '*.log,*.tmp'
          scanners: 'vuln,config,secret,license'

      - name: Run Trivy configuration scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          scanners: 'config'
          skip-dirs: 'node_modules,dist,build,target'

      - name: Run Trivy dependency scan (Node.js)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'package.json'
          format: 'sarif'
          output: 'trivy-node-deps.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          scanners: 'vuln'

      - name: Run Trivy dependency scan (Rust)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src-tauri/Cargo.toml'
          format: 'sarif'
          output: 'trivy-rust-deps.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
          scanners: 'vuln'

      - name: Run Trivy license scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-license-results.txt'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          exit-code: '0'
          scanners: 'license'
          skip-dirs: 'node_modules,dist,build,target'

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'
        continue-on-error: true

      - name: Upload Trivy configuration results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-configuration'
        continue-on-error: true

      - name: Upload Trivy Node.js dependency results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-node-deps.sarif'
          category: 'trivy-node-dependencies'
        continue-on-error: true

      - name: Upload Trivy Rust dependency results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-rust-deps.sarif'
          category: 'trivy-rust-dependencies'
        continue-on-error: true

      - name: Upload Trivy scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: |
            trivy-*.sarif
            trivy-*.txt
          retention-days: 30

      - name: Generate Trivy summary
        if: always()
        run: |
          echo "## Trivy Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Performed:" >> $GITHUB_STEP_SUMMARY
          echo "- **Filesystem**: Vulnerabilities and misconfigurations" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: Infrastructure as Code security issues" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: Node.js and Rust package vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **License**: License compliance check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "trivy-fs-results.sarif" ]; then
            echo "✅ Filesystem scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "trivy-config-results.sarif" ]; then
            echo "✅ Configuration scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "trivy-node-deps.sarif" ]; then
            echo "✅ Node.js dependency scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "trivy-rust-deps.sarif" ]; then
            echo "✅ Rust dependency scan completed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "trivy-license-results.txt" ]; then
            echo "✅ License compliance scan completed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### License Scan Results:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 trivy-license-results.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No license issues found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results Location:" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tab**: Detailed findings uploaded to GitHub Security" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifacts**: Raw scan results available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security alerts in the GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix configuration issues" >> $GITHUB_STEP_SUMMARY
          echo "4. Review license compliance findings" >> $GITHUB_STEP_SUMMARY

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-secrets.sarif'
          scanners: 'secret'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          skip-dirs: 'node_modules,dist,build,target,.git'

      - name: Upload secret scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-secrets.sarif'
          category: 'trivy-secrets'
        continue-on-error: true

      - name: Secret scan summary
        if: always()
        run: |
          echo "## Secret Detection Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "trivy-secrets.sarif" ]; then
            echo "✅ Secret scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "Results uploaded to GitHub Security tab under 'trivy-secrets' category" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
          fi