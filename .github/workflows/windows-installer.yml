name: 'Windows Installer'

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-installer:
    name: 'Build Windows Installer'
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: npm ci

      - name: Setup Tauri icons
        run: |
          # Create icon directory
          mkdir src-tauri\icons -Force
          
          # Copy main logo (you would typically generate proper icons here)
          Copy-Item "BEAR_AI_logo.png" "src-tauri\icons\icon.png" -Force
          
          # Generate ICO file for Windows (requires ImageMagick or similar)
          # For now, we'll use the PNG as a placeholder
          Copy-Item "BEAR_AI_logo.png" "src-tauri\icons\icon.ico" -Force

      - name: Update version in Tauri config
        run: |
          $version = if ($env:GITHUB_REF -match 'refs/tags/v(.*)') { $matches[1] } else { "${{ github.event.inputs.version }}" }
          $config = Get-Content "src-tauri\tauri.conf.json" | ConvertFrom-Json
          $config.package.version = $version
          $config | ConvertTo-Json -Depth 10 | Set-Content "src-tauri\tauri.conf.json"

      - name: Build Tauri application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: npm run tauri build

      - name: Create additional Windows installer with NSIS
        run: |
          # Install NSIS
          choco install nsis -y
          
          # Create NSIS script
          $nsisScript = @"
          !include "MUI2.nsh"
          !include "FileFunc.nsh"
          
          Name "BEAR AI Legal Assistant"
          OutFile "BEAR_AI_Setup.exe"
          Unicode True
          
          InstallDir `$PROGRAMFILES64\BEAR_AI
          InstallDirRegKey HKLM "Software\BEAR_AI" "InstallDir"
          
          RequestExecutionLevel admin
          
          !define MUI_ABORTWARNING
          !define MUI_ICON "src-tauri\icons\icon.ico"
          !define MUI_UNICON "src-tauri\icons\icon.ico"
          
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE "LICENSE"
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH
          
          !insertmacro MUI_UNPAGE_WELCOME
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          !insertmacro MUI_UNPAGE_FINISH
          
          !insertmacro MUI_LANGUAGE "English"
          
          Section "BEAR AI Legal Assistant" SecMain
            SetOutPath `$INSTDIR
            
            # Install main executable and files
            File /r "src-tauri\target\release\bundle\msi\*"
            
            # Create shortcuts
            CreateDirectory "`$SMPROGRAMS\BEAR AI"
            CreateShortCut "`$SMPROGRAMS\BEAR AI\BEAR AI Legal Assistant.lnk" "`$INSTDIR\bear-ai-legal-assistant.exe"
            CreateShortCut "`$DESKTOP\BEAR AI Legal Assistant.lnk" "`$INSTDIR\bear-ai-legal-assistant.exe"
            
            # Registry entries
            WriteRegStr HKLM "Software\BEAR_AI" "InstallDir" "`$INSTDIR"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\BEAR_AI" "DisplayName" "BEAR AI Legal Assistant"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\BEAR_AI" "UninstallString" "`$INSTDIR\Uninstall.exe"
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\BEAR_AI" "NoModify" 1
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\BEAR_AI" "NoRepair" 1
            
            WriteUninstaller "`$INSTDIR\Uninstall.exe"
          SectionEnd
          
          Section "Uninstall"
            Delete "`$INSTDIR\*.*"
            RMDir /r "`$INSTDIR"
            Delete "`$SMPROGRAMS\BEAR AI\*.*"
            RMDir "`$SMPROGRAMS\BEAR AI"
            Delete "`$DESKTOP\BEAR AI Legal Assistant.lnk"
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\BEAR_AI"
            DeleteRegKey HKLM "Software\BEAR_AI"
          SectionEnd
          "@
          
          $nsisScript | Out-File -FilePath "installer.nsi" -Encoding UTF8
          
          # Build NSIS installer
          & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi

      - name: Sign executables (if certificate available)
        if: env.WINDOWS_CERTIFICATE != ''
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          # Decode certificate from base64
          $bytes = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
          [System.IO.File]::WriteAllBytes("certificate.pfx", $bytes)
          
          # Sign the installer
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe" sign /f certificate.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 BEAR_AI_Setup.exe
          
          # Clean up certificate
          Remove-Item certificate.pfx

      - name: Create portable version
        run: |
          # Create portable directory
          mkdir BEAR_AI_Portable -Force
          
          # Copy executable and required files
          Copy-Item "src-tauri\target\release\bear-ai-legal-assistant.exe" "BEAR_AI_Portable\" -Force
          
          # Create portable marker file
          New-Item -ItemType File -Path "BEAR_AI_Portable\portable.txt" -Force
          
          # Create batch launcher for portable version
          $launcher = @"
          @echo off
          cd /d "%~dp0"
          start bear-ai-legal-assistant.exe
          "@
          $launcher | Out-File -FilePath "BEAR_AI_Portable\Launch_BEAR_AI.bat" -Encoding ASCII
          
          # Create ZIP for portable version
          Compress-Archive -Path "BEAR_AI_Portable\*" -DestinationPath "BEAR_AI_Portable.zip" -Force

      - name: Test installer
        run: |
          # Test NSIS installer in silent mode
          Write-Host "Testing NSIS installer..."
          $process = Start-Process -FilePath "BEAR_AI_Setup.exe" -ArgumentList "/S" -Wait -PassThru
          if ($process.ExitCode -eq 0) {
            Write-Host "✅ Installer test passed"
          } else {
            Write-Host "❌ Installer test failed with exit code $($process.ExitCode)"
            exit 1
          }

      - name: Upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            BEAR_AI_Setup.exe
            BEAR_AI_Portable.zip
            src-tauri/target/release/bundle/**/*
          retention-days: 30

      - name: Upload to release (if tag)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            BEAR_AI_Setup.exe
            BEAR_AI_Portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create installation testing report
        run: |
          $report = @"
          # Windows Installer Test Report
          
          **Build Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
          **Git Ref**: $env:GITHUB_REF
          **Git SHA**: $env:GITHUB_SHA
          
          ## Artifacts Created
          - ✅ NSIS Installer (BEAR_AI_Setup.exe)
          - ✅ Portable Version (BEAR_AI_Portable.zip)
          - ✅ MSI Package (from Tauri)
          
          ## Test Results
          - ✅ Installer creation: SUCCESS
          - ✅ Silent installation test: SUCCESS
          
          ## Installer Features
          - Windows 10/11 compatible
          - Program Files installation
          - Desktop shortcut creation
          - Start Menu integration
          - Add/Remove Programs entry
          - Uninstaller included
          - Portable version available
          
          ## Deployment Ready
          This build is ready for deployment and distribution.
          "@
          
          $report | Out-File -FilePath "installer-test-report.md" -Encoding UTF8
          Get-Content "installer-test-report.md"

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: installer-test-report
          path: installer-test-report.md
          retention-days: 30