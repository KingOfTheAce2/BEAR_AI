# Modern BEAR AI Package Configuration
# This will replace both setup.py and the current pyproject.toml

[build-system]
requires = ["setuptools>=65.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "bear-ai"
dynamic = ["version", "description"]
authors = [
    {name = "BEAR AI Contributors", email = "contributors@bear-ai.org"}
]
maintainers = [
    {name = "BEAR AI Team", email = "maintainers@bear-ai.org"}
]
license = {text = "Proprietary"}
readme = "README.md"
requires-python = ">=3.9"

keywords = [
    "ai", "artificial-intelligence", "machine-learning", "llm", "local-ai",
    "privacy", "security", "nlp", "multimodal", "rag", "vector-search",
    "chat", "conversation", "assistant", "bear-ai"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Legal Industry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Security",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: X11 Applications",
    "Environment :: Win32 (MS Windows)",
    "Environment :: MacOS X",
]

# Core dependencies - minimal for basic functionality
dependencies = [
    "huggingface_hub>=0.24.0",
    "tqdm>=4.66.0",
    "requests>=2.31.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "appdirs>=1.4.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/bear-ai/bear-ai"
Documentation = "https://docs.bear-ai.org"
Repository = "https://github.com/bear-ai/bear-ai.git"
"Bug Reports" = "https://github.com/bear-ai/bear-ai/issues"
"Changelog" = "https://github.com/bear-ai/bear-ai/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/bear-ai"

# Console script entry points - standardized command interface
[project.scripts]
bear-ai = "bear_ai.__main__:main"                    # Main CLI interface
bear-ai-gui = "bear_ai.gui.__main__:main"           # GUI launcher with selector
bear-ai-chat = "bear_ai.core.chat:main"             # Interactive chat interface
bear-ai-scrub = "bear_ai.privacy.scrub:main"        # PII scrubbing tool
bear-ai-serve = "bear_ai.server.openai_server:main" # OpenAI-compatible API server
bear-ai-setup = "bear_ai.setup:main"                # Initial setup wizard
bear-ai-models = "bear_ai.models.manager:main"      # Model management CLI
bear-ai-benchmark = "bear_ai.benchmarking:main"     # Performance benchmarking

# GUI-specific entry points for direct access
[project.gui-scripts] 
bear-ai-simple-gui = "bear_ai.gui.simple:main"      # Simple GUI directly
bear-ai-modern-gui = "bear_ai.gui.modern:main"      # Modern GUI directly
bear-ai-pro-gui = "bear_ai.gui.professional:main"   # Professional GUI directly

# Optional feature dependencies
[project.optional-dependencies]

# Basic AI inference capabilities
inference = [
    "llama-cpp-python>=0.2.66",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "numpy>=1.24.0",
    "accelerate>=0.20.0",
]

# Advanced multimodal support
multimodal = [
    "sentence-transformers>=2.2.0",
    "Pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
    "openai-whisper>=20231117",
    "librosa>=0.10.0",
    "mutagen>=1.47.0",
    "pypdf>=3.0.0",
    "python-docx>=1.0.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
]

# RAG and vector search capabilities
rag = [
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "faiss-cpu>=1.7.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "pypdf>=3.0.0",
    "python-docx>=1.0.0",
]

# Privacy and PII detection
privacy = [
    "presidio-analyzer>=2.2.33",
    "presidio-anonymizer>=2.2.33", 
    "spacy>=3.6.0",
    "spacy-transformers>=1.2.0",
    "transformers>=4.21.0",
    "torch>=2.0.0",
]

# Enhanced GUI interfaces
gui = [
    "customtkinter>=5.2.0",
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "tkinter-tooltip>=2.0.0",
    "Pillow>=10.0.0",
]

# Hardware monitoring and optimization
hardware = [
    "nvidia-ml-py>=11.495.46",
    "GPUtil>=1.4.0",
    "psutil>=5.9.0",
    "pynvml>=11.5.0",
    "cpuinfo>=9.0.0",
]

# Web server and API capabilities
server = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "openai>=1.0.0",
    "sse-starlette>=1.6.0",
    "python-multipart>=0.0.6",
]

# Development and testing tools
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# Legal and compliance tools
legal = [
    "python-docx>=1.0.0",
    "pypdf>=3.0.0", 
    "presidio-analyzer>=2.2.33",
    "presidio-anonymizer>=2.2.33",
    "openpyxl>=3.1.0",
    "pandas>=2.0.0",
]

# Complete installation (all features except dev)
full = [
    # Include all feature dependencies except dev
    "llama-cpp-python>=0.2.66",
    "torch>=2.0.0", 
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0",
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
    "openai-whisper>=20231117", 
    "chromadb>=0.4.0",
    "presidio-analyzer>=2.2.33",
    "presidio-anonymizer>=2.2.33",
    "spacy>=3.6.0",
    "customtkinter>=5.2.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "matplotlib>=3.7.0",
]

# Setuptools configuration
[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["bear_ai*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
bear_ai = [
    "data/*",
    "templates/*", 
    "models/*",
    "static/*",
    "config/*",
    "gui/assets/*",
    "gui/themes/*",
    "privacy/models/*",
    "*.json",
    "*.yml",
    "*.yaml",
]

# Dynamic version from package __init__.py
[tool.setuptools.dynamic]
version = {attr = "bear_ai.__version__"}
description = {attr = "bear_ai.__description__"}

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bear_ai"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "customtkinter.*",
    "llama_cpp.*", 
    "transformers.*",
    "presidio_analyzer.*",
    "presidio_anonymizer.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"] 
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bear_ai",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]