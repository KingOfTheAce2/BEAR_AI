import React from 'react'\nimport { cn } from '../../utils/cn'\nimport { Agent } from '../../types'\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card'\nimport { Button } from '../ui/Button'\nimport { Input } from '../ui/Input'\nimport { Badge } from '../ui/Badge'\nimport { Form, useForm } from '../forms/Form'\nimport {\n  Settings,\n  Save,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Trash2,\n  Plus,\n  Minus,\n  Copy,\n  Download,\n  Upload,\n  Eye,\n  EyeOff\n} from 'lucide-react'\n\nexport interface ConfigurationPanelProps {\n  agent?: Agent\n  onSave: (config: AgentConfiguration) => void\n  onReset?: () => void\n  onDelete?: () => void\n  onDuplicate?: () => void\n  onImport?: (config: AgentConfiguration) => void\n  onExport?: (config: AgentConfiguration) => void\n  className?: string\n}\n\ninterface AgentConfiguration {\n  name: string\n  type: Agent['type']\n  capabilities: string[]\n  settings: {\n    maxConcurrency: number\n    timeout: number\n    retryAttempts: number\n    memoryLimit: number\n    priority: 'low' | 'medium' | 'high'\n    autoStart: boolean\n    enableLogging: boolean\n    enableMetrics: boolean\n  }\n  advanced: {\n    customPrompt?: string\n    environment: Record<string, string>\n    permissions: string[]\n    dependencies: string[]\n  }\n}\n\nconst ConfigurationPanel: React.FC<ConfigurationPanelProps> = ({\n  agent,\n  onSave,\n  onReset,\n  onDelete,\n  onDuplicate,\n  onImport,\n  onExport,\n  className,\n}) => {\n  const [activeTab, setActiveTab] = React.useState<'basic' | 'settings' | 'advanced'>('basic')\n  const [showAdvanced, setShowAdvanced] = React.useState(false)\n  const [hasChanges, setHasChanges] = React.useState(false)\n  const [isLoading, setIsLoading] = React.useState(false)\n  const [config, setConfig] = React.useState<AgentConfiguration>({\n    name: agent?.name || '',\n    type: agent?.type || 'researcher',\n    capabilities: agent?.capabilities || [],\n    settings: {\n      maxConcurrency: 5,\n      timeout: 30000,\n      retryAttempts: 3,\n      memoryLimit: 512,\n      priority: 'medium',\n      autoStart: false,\n      enableLogging: true,\n      enableMetrics: true,\n    },\n    advanced: {\n      customPrompt: '',\n      environment: {},\n      permissions: ['read', 'write'],\n      dependencies: [],\n    }\n  })\n\n  const [newCapability, setNewCapability] = React.useState('')\n  const [newEnvVar, setNewEnvVar] = React.useState({ key: '', value: '' })\n  const [newPermission, setNewPermission] = React.useState('')\n  const [newDependency, setNewDependency] = React.useState('')\n\n  const handleConfigChange = (field: string, value: any) => {\n    setConfig(prev => {\n      const keys = field.split('.')\n      const updated = { ...prev }\n      let current: any = updated\n      \n      for (let i = 0; i < keys.length - 1; i++) {\n        current[keys[i]] = { ...current[keys[i]] }\n        current = current[keys[i]]\n      }\n      \n      current[keys[keys.length - 1]] = value\n      return updated\n    })\n    setHasChanges(true)\n  }\n\n  const handleSave = async () => {\n    setIsLoading(true)\n    try {\n      await onSave(config)\n      setHasChanges(false)\n    } catch (error) {\n      console.error('Failed to save configuration:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleReset = () => {\n    if (onReset) {\n      onReset()\n    }\n    setHasChanges(false)\n  }\n\n  const addCapability = () => {\n    if (newCapability.trim() && !config.capabilities.includes(newCapability.trim())) {\n      handleConfigChange('capabilities', [...config.capabilities, newCapability.trim()])\n      setNewCapability('')\n    }\n  }\n\n  const removeCapability = (capability: string) => {\n    handleConfigChange('capabilities', config.capabilities.filter(c => c !== capability))\n  }\n\n  const addEnvironmentVariable = () => {\n    if (newEnvVar.key.trim() && newEnvVar.value.trim()) {\n      handleConfigChange('advanced.environment', {\n        ...config.advanced.environment,\n        [newEnvVar.key]: newEnvVar.value\n      })\n      setNewEnvVar({ key: '', value: '' })\n    }\n  }\n\n  const removeEnvironmentVariable = (key: string) => {\n    const { [key]: _, ...rest } = config.advanced.environment\n    handleConfigChange('advanced.environment', rest)\n  }\n\n  const tabs = [\n    { id: 'basic', label: 'Basic', icon: Settings },\n    { id: 'settings', label: 'Settings', icon: Settings },\n    { id: 'advanced', label: 'Advanced', icon: AlertCircle },\n  ] as const\n\n  const BasicTab: React.FC = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Agent Name</label>\n        <Input\n          value={config.name}\n          onChange={(e) => handleConfigChange('name', e.target.value)}\n          placeholder=\"Enter agent name\"\n        />\n      </div>\n      \n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Agent Type</label>\n        <select\n          value={config.type}\n          onChange={(e) => handleConfigChange('type', e.target.value as Agent['type'])}\n          className=\"w-full px-3 py-2 border border-input rounded-md bg-background\"\n        >\n          <option value=\"researcher\">Researcher</option>\n          <option value=\"coder\">Coder</option>\n          <option value=\"analyst\">Analyst</option>\n          <option value=\"optimizer\">Optimizer</option>\n          <option value=\"coordinator\">Coordinator</option>\n        </select>\n      </div>\n      \n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Capabilities</label>\n        <div className=\"flex gap-2 mb-2\">\n          <Input\n            value={newCapability}\n            onChange={(e) => setNewCapability(e.target.value)}\n            placeholder=\"Add capability\"\n            onKeyPress={(e) => e.key === 'Enter' && addCapability()}\n          />\n          <Button onClick={addCapability} size=\"icon\">\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          {config.capabilities.map(capability => (\n            <Badge key={capability} variant=\"outline\" className=\"gap-1\">\n              {capability}\n              <button\n                onClick={() => removeCapability(capability)}\n                className=\"ml-1 hover:text-destructive\"\n              >\n                <Minus className=\"h-3 w-3\" />\n              </button>\n            </Badge>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n\n  const SettingsTab: React.FC = () => (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium mb-2 block\">Max Concurrency</label>\n          <Input\n            type=\"number\"\n            value={config.settings.maxConcurrency}\n            onChange={(e) => handleConfigChange('settings.maxConcurrency', parseInt(e.target.value))}\n            min=\"1\"\n            max=\"20\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium mb-2 block\">Timeout (ms)</label>\n          <Input\n            type=\"number\"\n            value={config.settings.timeout}\n            onChange={(e) => handleConfigChange('settings.timeout', parseInt(e.target.value))}\n            min=\"1000\"\n            step=\"1000\"\n          />\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"text-sm font-medium mb-2 block\">Retry Attempts</label>\n          <Input\n            type=\"number\"\n            value={config.settings.retryAttempts}\n            onChange={(e) => handleConfigChange('settings.retryAttempts', parseInt(e.target.value))}\n            min=\"0\"\n            max=\"10\"\n          />\n        </div>\n        <div>\n          <label className=\"text-sm font-medium mb-2 block\">Memory Limit (MB)</label>\n          <Input\n            type=\"number\"\n            value={config.settings.memoryLimit}\n            onChange={(e) => handleConfigChange('settings.memoryLimit', parseInt(e.target.value))}\n            min=\"64\"\n            step=\"64\"\n          />\n        </div>\n      </div>\n      \n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Priority</label>\n        <select\n          value={config.settings.priority}\n          onChange={(e) => handleConfigChange('settings.priority', e.target.value as 'low' | 'medium' | 'high')}\n          className=\"w-full px-3 py-2 border border-input rounded-md bg-background\"\n        >\n          <option value=\"low\">Low</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"high\">High</option>\n        </select>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            id=\"autoStart\"\n            checked={config.settings.autoStart}\n            onChange={(e) => handleConfigChange('settings.autoStart', e.target.checked)}\n            className=\"rounded\"\n          />\n          <label htmlFor=\"autoStart\" className=\"text-sm font-medium\">Auto Start</label>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            id=\"enableLogging\"\n            checked={config.settings.enableLogging}\n            onChange={(e) => handleConfigChange('settings.enableLogging', e.target.checked)}\n            className=\"rounded\"\n          />\n          <label htmlFor=\"enableLogging\" className=\"text-sm font-medium\">Enable Logging</label>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"checkbox\"\n            id=\"enableMetrics\"\n            checked={config.settings.enableMetrics}\n            onChange={(e) => handleConfigChange('settings.enableMetrics', e.target.checked)}\n            className=\"rounded\"\n          />\n          <label htmlFor=\"enableMetrics\" className=\"text-sm font-medium\">Enable Metrics</label>\n        </div>\n      </div>\n    </div>\n  )\n\n  const AdvancedTab: React.FC = () => (\n    <div className=\"space-y-4\">\n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Custom Prompt</label>\n        <textarea\n          value={config.advanced.customPrompt || ''}\n          onChange={(e) => handleConfigChange('advanced.customPrompt', e.target.value)}\n          placeholder=\"Enter custom prompt instructions...\"\n          className=\"w-full px-3 py-2 border border-input rounded-md bg-background min-h-[100px]\"\n        />\n      </div>\n      \n      <div>\n        <label className=\"text-sm font-medium mb-2 block\">Environment Variables</label>\n        <div className=\"flex gap-2 mb-2\">\n          <Input\n            value={newEnvVar.key}\n            onChange={(e) => setNewEnvVar(prev => ({ ...prev, key: e.target.value }))}\n            placeholder=\"Key\"\n          />\n          <Input\n            value={newEnvVar.value}\n            onChange={(e) => setNewEnvVar(prev => ({ ...prev, value: e.target.value }))}\n            placeholder=\"Value\"\n          />\n          <Button onClick={addEnvironmentVariable} size=\"icon\">\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <div className=\"space-y-2\">\n          {Object.entries(config.advanced.environment).map(([key, value]) => (\n            <div key={key} className=\"flex items-center justify-between p-2 border rounded\">\n              <span className=\"text-sm font-mono\">{key}={value}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => removeEnvironmentVariable(key)}\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n\n  return (\n    <Card className={cn('h-full flex flex-col', className)}>\n      <CardHeader className=\"shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Agent Configuration\n            {hasChanges && (\n              <Badge variant=\"warning\" className=\"text-xs\">\n                Unsaved\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center gap-1\">\n            {onDuplicate && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onDuplicate}>\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onExport && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => onExport(config)}>\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onImport && (\n              <Button variant=\"ghost\" size=\"icon\">\n                <Upload className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        {/* Tab Navigation */}\n        <div className=\"flex border-b border-border\">\n          {tabs.map(tab => {\n            const Icon = tab.icon\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={cn(\n                  'flex items-center gap-2 px-4 py-2 text-sm font-medium border-b-2 transition-colors',\n                  activeTab === tab.id\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                )}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {tab.label}\n              </button>\n            )\n          })}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'basic' && <BasicTab />}\n        {activeTab === 'settings' && <SettingsTab />}\n        {activeTab === 'advanced' && <AdvancedTab />}\n      </CardContent>\n      \n      {/* Footer Actions */}\n      <div className=\"shrink-0 flex items-center justify-between p-4 border-t border-border\">\n        <div className=\"flex items-center gap-2\">\n          {onDelete && (\n            <Button variant=\"destructive\" size=\"sm\" onClick={onDelete}>\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Delete\n            </Button>\n          )}\n          {onReset && (\n            <Button variant=\"outline\" size=\"sm\" onClick={handleReset}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Reset\n            </Button>\n          )}\n        </div>\n        \n        <Button \n          onClick={handleSave} \n          disabled={!hasChanges || isLoading}\n          loading={isLoading}\n        >\n          <Save className=\"h-4 w-4 mr-2\" />\n          Save Configuration\n        </Button>\n      </div>\n    </Card>\n  )\n}\n\nexport { ConfigurationPanel }"