import React from 'react'
import { cn } from '../../utils/cn'
import { Conversation, Message, Agent } from '../../types'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card'
import { Button } from '../ui/Button'
import { Input } from '../ui/Input'
import { Avatar } from '../ui/Avatar'
import { Badge } from '../ui/Badge'
import { 
  Send, 
  Paperclip, 
  Smile,\n  MoreVertical,\n  Play,\n  Pause,\n  Square,\n  Settings,\n  Users\n} from 'lucide-react'

export interface ConversationInterfaceProps {\n  conversation: Conversation\n  currentUser?: Agent\n  onSendMessage: (content: string, type?: Message['type']) => void\n  onPauseConversation?: () => void\n  onResumeConversation?: () => void\n  onEndConversation?: () => void\n  onAddParticipant?: () => void\n  onConfigureConversation?: () => void\n  className?: string\n}\n\nconst ConversationInterface: React.FC<ConversationInterfaceProps> = ({\n  conversation,\n  currentUser,\n  onSendMessage,\n  onPauseConversation,\n  onResumeConversation,\n  onEndConversation,\n  onAddParticipant,\n  onConfigureConversation,\n  className,\n}) => {\n  const [message, setMessage] = React.useState('')\n  const [isTyping, setIsTyping] = React.useState(false)\n  const messagesEndRef = React.useRef<HTMLDivElement>(null)\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  // Auto-scroll to bottom when new messages arrive\n  React.useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [conversation.messages])\n\n  // Focus input on mount\n  React.useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return\n    \n    onSendMessage(message.trim())\n    setMessage('')\n    setIsTyping(false)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const getParticipantById = (agentId: string): Agent | undefined => {\n    return conversation.participants.find(p => p.id === agentId)\n  }\n\n  const formatTimestamp = (timestamp: Date): string => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    })\n  }\n\n  const getMessageTypeIcon = (type: Message['type']) => {\n    switch (type) {\n      case 'code':\n        return '💻'\n      case 'file':\n        return '📎'\n      case 'image':\n        return '🖼️'\n      case 'system':\n        return '⚙️'\n      default:\n        return '💬'\n    }\n  }\n\n  const renderMessage = (message: Message) => {\n    const participant = getParticipantById(message.agentId)\n    const isCurrentUser = currentUser && message.agentId === currentUser.id\n    \n    return (\n      <div\n        key={message.id}\n        className={cn(\n          'flex gap-3 mb-4',\n          isCurrentUser && 'flex-row-reverse'\n        )}\n      >\n        <Avatar\n          src={participant?.avatar}\n          alt={participant?.name}\n          fallback={participant?.name?.charAt(0)}\n          size=\"sm\"\n          showStatus\n          status={participant?.status === 'active' ? 'online' : 'offline'}\n        />\n        \n        <div className={cn(\n          'flex-1 min-w-0',\n          isCurrentUser && 'text-right'\n        )}>\n          <div className={cn(\n            'flex items-center gap-2 mb-1',\n            isCurrentUser && 'justify-end'\n          )}>\n            <span className=\"text-sm font-medium text-foreground\">\n              {participant?.name || 'Unknown Agent'}\n            </span>\n            <span className=\"text-xs text-muted-foreground\">\n              {formatTimestamp(message.timestamp)}\n            </span>\n            {message.type !== 'text' && (\n              <span className=\"text-xs\">\n                {getMessageTypeIcon(message.type)}\n              </span>\n            )}\n          </div>\n          \n          <div className={cn(\n            'inline-block max-w-[80%] p-3 rounded-lg text-sm',\n            isCurrentUser \n              ? 'bg-primary text-primary-foreground ml-auto'\n              : 'bg-muted text-muted-foreground',\n            message.type === 'code' && 'font-mono text-xs bg-gray-900 text-green-400',\n            message.type === 'system' && 'bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100'\n          )}>\n            {message.type === 'code' ? (\n              <pre className=\"whitespace-pre-wrap\">{message.content}</pre>\n            ) : (\n              <p className=\"whitespace-pre-wrap\">{message.content}</p>\n            )}\n            \n            {message.metadata && Object.keys(message.metadata).length > 0 && (\n              <div className=\"mt-2 pt-2 border-t border-current/20 text-xs opacity-75\">\n                {Object.entries(message.metadata).map(([key, value]) => (\n                  <div key={key} className=\"flex justify-between\">\n                    <span>{key}:</span>\n                    <span>{String(value)}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Card className={cn('h-full flex flex-col', className)}>\n      {/* Header */}\n      <CardHeader className=\"shrink-0 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"relative\">\n              <Users className=\"h-5 w-5 text-muted-foreground\" />\n              <Badge \n                variant=\"outline\" \n                className=\"absolute -top-2 -right-2 text-xs px-1 min-w-[20px] h-5\"\n              >\n                {conversation.participants.length}\n              </Badge>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <CardTitle className=\"truncate text-base\">\n                {conversation.title}\n              </CardTitle>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge \n                  variant={conversation.status === 'active' ? 'default' : 'secondary'}\n                  className=\"text-xs\"\n                >\n                  {conversation.status}\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  {conversation.messages.length} messages\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Actions */}\n          <div className=\"flex items-center gap-1\">\n            {conversation.status === 'active' && onPauseConversation && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onPauseConversation}>\n                <Pause className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {conversation.status === 'paused' && onResumeConversation && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onResumeConversation}>\n                <Play className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onEndConversation && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onEndConversation}>\n                <Square className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onAddParticipant && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onAddParticipant}>\n                <Users className=\"h-4 w-4\" />\n              </Button>\n            )}\n            {onConfigureConversation && (\n              <Button variant=\"ghost\" size=\"icon\" onClick={onConfigureConversation}>\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n\n      {/* Messages */}\n      <CardContent className=\"flex-1 overflow-y-auto p-4\">\n        {conversation.messages.length === 0 ? (\n          <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n            <div className=\"text-center\">\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No messages yet. Start the conversation!</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {conversation.messages.map(renderMessage)}\n            {isTyping && (\n              <div className=\"flex gap-3 mb-4 opacity-75\">\n                <Avatar\n                  fallback=\"...\"\n                  size=\"sm\"\n                />\n                <div className=\"flex-1\">\n                  <div className=\"inline-block bg-muted p-3 rounded-lg\">\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" />\n                      <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                      <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n        )}\n      </CardContent>\n\n      {/* Input */}\n      {conversation.status === 'active' && (\n        <div className=\"shrink-0 border-t border-border p-4\">\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <Paperclip className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\">\n              <Smile className=\"h-4 w-4\" />\n            </Button>\n            \n            <Input\n              ref={inputRef}\n              value={message}\n              onChange={(e) => {\n                setMessage(e.target.value)\n                setIsTyping(e.target.value.length > 0)\n              }}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Type your message...\"\n              className=\"flex-1\"\n              disabled={conversation.status !== 'active'}\n            />\n            \n            <Button \n              onClick={handleSendMessage}\n              disabled={!message.trim() || conversation.status !== 'active'}\n              size=\"icon\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </Card>\n  )\n}\n\nexport { ConversationInterface }"