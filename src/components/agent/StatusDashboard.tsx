import React from 'react'\nimport { cn } from '@/utils/cn'\nimport { Agent, Task, DashboardConfig, WidgetConfig } from '@/types'\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card'\nimport { Badge } from '../ui/Badge'\nimport { Button } from '../ui/Button'\nimport { AgentCard } from './AgentCard'\nimport {\n  Activity,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Cpu,\n  RefreshCw,\n  TrendingUp,\n  Users,\n  Zap,\n  BarChart3,\n  PieChart,\n  LineChart,\n  Grid3X3,\n  List,\n  LayoutGrid\n} from 'lucide-react'\n\nexport interface StatusDashboardProps {\n  agents: Agent[]\n  tasks: Task[]\n  config?: DashboardConfig\n  onConfigChange?: (config: DashboardConfig) => void\n  onRefresh?: () => void\n  autoRefresh?: boolean\n  refreshInterval?: number\n  className?: string\n}\n\nconst StatusDashboard: React.FC<StatusDashboardProps> = ({\n  agents = [],\n  tasks = [],\n  config,\n  onConfigChange,\n  onRefresh,\n  autoRefresh = false,\n  refreshInterval = 30000,\n  className,\n}) => {\n  const [lastUpdate, setLastUpdate] = React.useState(new Date())\n  const [isRefreshing, setIsRefreshing] = React.useState(false)\n\n  // Auto-refresh functionality\n  React.useEffect(() => {\n    if (!autoRefresh) return\n\n    const interval = setInterval(() => {\n      if (onRefresh) {\n        setIsRefreshing(true)\n        onRefresh()\n        setTimeout(() => {\n          setIsRefreshing(false)\n          setLastUpdate(new Date())\n        }, 1000)\n      }\n    }, refreshInterval)\n\n    return () => clearInterval(interval)\n  }, [autoRefresh, refreshInterval, onRefresh])\n\n  // Calculate metrics\n  const totalAgents = agents.length\n  const activeAgents = agents.filter(a => a.status === 'active').length\n  const busyAgents = agents.filter(a => a.status === 'busy').length\n  const idleAgents = agents.filter(a => a.status === 'idle').length\n  const errorAgents = agents.filter(a => a.status === 'error').length\n\n  const totalTasks = tasks.length\n  const completedTasks = tasks.filter(t => t.status === 'completed').length\n  const inProgressTasks = tasks.filter(t => t.status === 'in_progress').length\n  const pendingTasks = tasks.filter(t => t.status === 'pending').length\n  const failedTasks = tasks.filter(t => t.status === 'failed').length\n\n  const avgResponseTime = agents.reduce((acc, agent) => {\n    return acc + (agent.metrics?.averageResponseTime || 0)\n  }, 0) / (agents.length || 1)\n\n  const totalTasksCompleted = agents.reduce((acc, agent) => {\n    return acc + (agent.metrics?.tasksCompleted || 0)\n  }, 0)\n\n  const avgSuccessRate = agents.reduce((acc, agent) => {\n    return acc + (agent.metrics?.successRate || 0)\n  }, 0) / (agents.length || 1)\n\n  const handleRefresh = async () => {\n    if (!onRefresh || isRefreshing) return\n\n    setIsRefreshing(true)\n    await onRefresh()\n    setTimeout(() => {\n      setIsRefreshing(false)\n      setLastUpdate(new Date())\n    }, 1000)\n  }\n\n  const MetricCard: React.FC<{\n    title: string\n    value: string | number\n    icon: React.ReactNode\n    color?: string\n    trend?: number\n    subtitle?: string\n  }> = ({ title, value, icon, color = 'text-blue-500', trend, subtitle }) => (\n    <Card>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <p className=\"text-2xl font-bold\">{value}</p>\n              {trend !== undefined && (\n                <Badge \n                  variant={trend >= 0 ? 'success' : 'destructive'} \n                  className=\"text-xs\"\n                >\n                  {trend >= 0 ? '+' : ''}{trend}%\n                </Badge>\n              )}\n            </div>\n            {subtitle && (\n              <p className=\"text-xs text-muted-foreground mt-1\">{subtitle}</p>\n            )}\n          </div>\n          <div className={cn('p-2 rounded-lg bg-muted/20', color)}>\n            {icon}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n\n  const TaskStatusChart: React.FC = () => {\n    const total = totalTasks || 1\n    const segments = [\n      { label: 'Completed', value: completedTasks, color: 'bg-green-500' },\n      { label: 'In Progress', value: inProgressTasks, color: 'bg-blue-500' },\n      { label: 'Pending', value: pendingTasks, color: 'bg-yellow-500' },\n      { label: 'Failed', value: failedTasks, color: 'bg-red-500' },\n    ]\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <PieChart className=\"h-4 w-4\" />\n            Task Status Distribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Simple progress bars */}\n          <div className=\"space-y-3\">\n            {segments.map(segment => {\n              const percentage = (segment.value / total) * 100\n              return (\n                <div key={segment.label} className=\"space-y-1\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>{segment.label}</span>\n                    <span>{segment.value} ({Math.round(percentage)}%)</span>\n                  </div>\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div \n                      className={cn('h-2 rounded-full transition-all duration-300', segment.color)}\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const AgentStatusGrid: React.FC = () => (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Agent Status ({totalAgents})\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <CheckCircle className=\"h-3 w-3 mr-1 text-green-500\" />\n              {activeAgents}\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Activity className=\"h-3 w-3 mr-1 text-blue-500\" />\n              {busyAgents}\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Clock className=\"h-3 w-3 mr-1 text-yellow-500\" />\n              {idleAgents}\n            </Badge>\n            {errorAgents > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                <AlertCircle className=\"h-3 w-3 mr-1\" />\n                {errorAgents}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n          {agents.slice(0, 6).map(agent => (\n            <AgentCard\n              key={agent.id}\n              agent={agent}\n              compact\n              showMetrics={false}\n              interactive={false}\n            />\n          ))}\n          {agents.length > 6 && (\n            <Card className=\"flex items-center justify-center p-4 border-2 border-dashed border-muted-foreground/25\">\n              <div className=\"text-center text-muted-foreground\">\n                <Users className=\"h-6 w-6 mx-auto mb-2\" />\n                <p className=\"text-sm\">+{agents.length - 6} more agents</p>\n              </div>\n            </Card>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n\n  const RecentTasks: React.FC = () => {\n    const recentTasks = tasks\n      .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n      .slice(0, 5)\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <List className=\"h-4 w-4\" />\n            Recent Tasks\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {recentTasks.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-4\">\n                No tasks found\n              </p>\n            ) : (\n              recentTasks.map(task => (\n                <div key={task.id} className=\"flex items-center justify-between p-2 border rounded-lg\">\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-medium truncate text-sm\">{task.title}</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge \n                        variant={\n                          task.status === 'completed' ? 'success' :\n                          task.status === 'failed' ? 'destructive' :\n                          task.status === 'in_progress' ? 'default' : 'secondary'\n                        }\n                        className=\"text-xs\"\n                      >\n                        {task.status.replace('_', ' ')}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {task.priority}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground ml-2\">\n                    {Math.round(task.progress)}%\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className={cn('p-6 space-y-6', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Agent Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Last updated: {lastUpdate.toLocaleTimeString()}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n          >\n            <RefreshCw className={cn('h-4 w-4 mr-2', isRefreshing && 'animate-spin')} />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <MetricCard\n          title=\"Active Agents\"\n          value={`${activeAgents}/${totalAgents}`}\n          icon={<Users className=\"h-5 w-5\" />}\n          color=\"text-green-500\"\n          subtitle=\"Currently processing\"\n        />\n        <MetricCard\n          title=\"Tasks Completed\"\n          value={totalTasksCompleted}\n          icon={<CheckCircle className=\"h-5 w-5\" />}\n          color=\"text-blue-500\"\n          subtitle=\"All time total\"\n        />\n        <MetricCard\n          title=\"Success Rate\"\n          value={`${Math.round(avgSuccessRate * 100)}%`}\n          icon={<TrendingUp className=\"h-5 w-5\" />}\n          color=\"text-purple-500\"\n          subtitle=\"Average across agents\"\n        />\n        <MetricCard\n          title=\"Response Time\"\n          value={`${Math.round(avgResponseTime)}ms`}\n          icon={<Zap className=\"h-5 w-5\" />}\n          color=\"text-orange-500\"\n          subtitle=\"Average response\"\n        />\n      </div>\n\n      {/* Charts and Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <AgentStatusGrid />\n        </div>\n        <div className=\"space-y-6\">\n          <TaskStatusChart />\n          <RecentTasks />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { StatusDashboard }"