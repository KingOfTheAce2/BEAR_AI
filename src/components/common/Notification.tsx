import React from 'react'\nimport { createPortal } from 'react-dom'\nimport { cn, animations } from '../../utils/cn'\nimport { NotificationConfig, NotificationAction } from '../../types'\nimport { Card, CardContent } from '../ui/Card'\nimport { Button } from '../ui/Button'\nimport { Badge } from '../ui/Badge'\nimport {\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Info,\n  X,\n  Clock\n} from 'lucide-react'\n\nexport interface NotificationProps extends NotificationConfig {\n  id: string\n  onClose: (id: string) => void\n  onAction?: (action: NotificationAction) => void\n  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center'\n  showProgress?: boolean\n}\n\nconst Notification: React.FC<NotificationProps> = ({\n  id,\n  type,\n  title,\n  message,\n  duration = 5000,\n  persistent = false,\n  actions = [],\n  onClose,\n  onAction,\n  position = 'top-right',\n  showProgress = true,\n}) => {\n  const [progress, setProgress] = React.useState(100)\n  const [isVisible, setIsVisible] = React.useState(false)\n  const [isExiting, setIsExiting] = React.useState(false)\n  const progressRef = React.useRef<number>(100)\n  const intervalRef = React.useRef<NodeJS.Timeout>()\n  const timeoutRef = React.useRef<NodeJS.Timeout>()\n\n  // Entrance animation\n  React.useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 10)\n    return () => clearTimeout(timer)\n  }, [])\n\n  // Auto-dismiss timer\n  React.useEffect(() => {\n    if (persistent) return\n\n    const startTime = Date.now()\n    \n    intervalRef.current = setInterval(() => {\n      const elapsed = Date.now() - startTime\n      const remaining = Math.max(0, duration - elapsed)\n      const newProgress = (remaining / duration) * 100\n      \n      progressRef.current = newProgress\n      setProgress(newProgress)\n      \n      if (remaining <= 0) {\n        handleClose()\n      }\n    }, 50)\n\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current)\n      if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    }\n  }, [duration, persistent])\n\n  const handleClose = () => {\n    setIsExiting(true)\n    timeoutRef.current = setTimeout(() => {\n      onClose(id)\n    }, 200)\n  }\n\n  const handleAction = (action: NotificationAction) => {\n    onAction?.(action)\n    action.action()\n    handleClose()\n  }\n\n  const getIcon = () => {\n    const iconProps = { className: 'h-5 w-5' }\n    switch (type) {\n      case 'success':\n        return <CheckCircle {...iconProps} className=\"h-5 w-5 text-green-500\" />\n      case 'error':\n        return <XCircle {...iconProps} className=\"h-5 w-5 text-red-500\" />\n      case 'warning':\n        return <AlertTriangle {...iconProps} className=\"h-5 w-5 text-yellow-500\" />\n      case 'info':\n        return <Info {...iconProps} className=\"h-5 w-5 text-blue-500\" />\n    }\n  }\n\n  const getTypeStyles = () => {\n    switch (type) {\n      case 'success':\n        return 'border-l-green-500 bg-green-50 dark:bg-green-950/20'\n      case 'error':\n        return 'border-l-red-500 bg-red-50 dark:bg-red-950/20'\n      case 'warning':\n        return 'border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20'\n      case 'info':\n        return 'border-l-blue-500 bg-blue-50 dark:bg-blue-950/20'\n    }\n  }\n\n  const positionStyles = {\n    'top-right': 'top-4 right-4',\n    'top-left': 'top-4 left-4',\n    'bottom-right': 'bottom-4 right-4',\n    'bottom-left': 'bottom-4 left-4',\n    'top-center': 'top-4 left-1/2 -translate-x-1/2',\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-50 w-96 max-w-[calc(100vw-2rem)] transition-all duration-200',\n        positionStyles[position],\n        isVisible && !isExiting && animations.slideIn,\n        isExiting && animations.slideOut\n      )}\n    >\n      <Card className={cn(\n        'border-l-4 shadow-lg',\n        getTypeStyles()\n      )}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"shrink-0 mt-0.5\">\n              {getIcon()}\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-medium text-foreground\">{title}</h4>\n                  <p className=\"text-sm text-muted-foreground mt-1 leading-relaxed\">\n                    {message}\n                  </p>\n                </div>\n                \n                {!persistent && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={handleClose}\n                    className=\"shrink-0 h-6 w-6 -mt-1 -mr-2\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                )}\n              </div>\n              \n              {/* Actions */}\n              {actions.length > 0 && (\n                <div className=\"flex items-center gap-2 mt-3\">\n                  {actions.map((action, index) => (\n                    <Button\n                      key={index}\n                      variant={action.variant === 'primary' ? 'default' : 'outline'}\n                      size=\"xs\"\n                      onClick={() => handleAction(action)}\n                    >\n                      {action.label}\n                    </Button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Progress bar */}\n          {!persistent && showProgress && (\n            <div className=\"mt-3 -mb-1\">\n              <div className=\"h-1 bg-muted rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-current opacity-30 transition-all duration-100 ease-linear\"\n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Notification Manager Hook\ntype NotificationItem = NotificationProps & { id: string }\n\ninterface NotificationManager {\n  notifications: NotificationItem[]\n  show: (config: Omit<NotificationConfig, 'id'>) => string\n  hide: (id: string) => void\n  clear: () => void\n  success: (title: string, message: string, options?: Partial<NotificationConfig>) => string\n  error: (title: string, message: string, options?: Partial<NotificationConfig>) => string\n  warning: (title: string, message: string, options?: Partial<NotificationConfig>) => string\n  info: (title: string, message: string, options?: Partial<NotificationConfig>) => string\n}\n\nconst useNotifications = (): NotificationManager => {\n  const [notifications, setNotifications] = React.useState<NotificationItem[]>([])\n\n  const show = React.useCallback((config: Omit<NotificationConfig, 'id'>) => {\n    const id = Date.now().toString() + Math.random().toString(36)\n    const notification: NotificationItem = {\n      ...config,\n      id,\n      onClose: (notificationId: string) => {\n        setNotifications(prev => prev.filter(n => n.id !== notificationId))\n      }\n    }\n    \n    setNotifications(prev => [...prev, notification])\n    return id\n  }, [])\n\n  const hide = React.useCallback((id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id))\n  }, [])\n\n  const clear = React.useCallback(() => {\n    setNotifications([])\n  }, [])\n\n  const success = React.useCallback((title: string, message: string, options: Partial<NotificationConfig> = {}) => {\n    return show({ type: 'success', title, message, ...options })\n  }, [show])\n\n  const error = React.useCallback((title: string, message: string, options: Partial<NotificationConfig> = {}) => {\n    return show({ type: 'error', title, message, persistent: true, ...options })\n  }, [show])\n\n  const warning = React.useCallback((title: string, message: string, options: Partial<NotificationConfig> = {}) => {\n    return show({ type: 'warning', title, message, ...options })\n  }, [show])\n\n  const info = React.useCallback((title: string, message: string, options: Partial<NotificationConfig> = {}) => {\n    return show({ type: 'info', title, message, ...options })\n  }, [show])\n\n  return { notifications, show, hide, clear, success, error, warning, info }\n}\n\n// Notification Container Component\nconst NotificationContainer: React.FC<{\n  position?: NotificationProps['position']\n}> = ({ position = 'top-right' }) => {\n  const { notifications } = useNotifications()\n  \n  if (notifications.length === 0) return null\n\n  return createPortal(\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      {notifications.map(notification => (\n        <Notification\n          key={notification.id}\n          {...notification}\n          position={position}\n        />\n      ))}\n    </div>,\n    document.body\n  )\n}\n\nexport { Notification, useNotifications, NotificationContainer }"