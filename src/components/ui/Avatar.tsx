import React from 'react'\nimport { cn } from '@/utils/cn'\nimport { ComponentProps } from '@/types'\n\nexport interface AvatarProps extends ComponentProps {\n  src?: string\n  alt?: string\n  fallback?: string\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n  shape?: 'circle' | 'square'\n  status?: 'online' | 'offline' | 'away' | 'busy'\n  showStatus?: boolean\n}\n\nconst Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  ({ \n    src, \n    alt, \n    fallback,\n    size = 'md',\n    shape = 'circle',\n    status,\n    showStatus = false,\n    className,\n    ...props \n  }, ref) => {\n    const [imageError, setImageError] = React.useState(false)\n    const [imageLoaded, setImageLoaded] = React.useState(false)\n\n    const sizes = {\n      xs: 'h-6 w-6 text-xs',\n      sm: 'h-8 w-8 text-sm',\n      md: 'h-10 w-10 text-base',\n      lg: 'h-12 w-12 text-lg',\n      xl: 'h-16 w-16 text-xl',\n    }\n\n    const statusSizes = {\n      xs: 'h-1.5 w-1.5',\n      sm: 'h-2 w-2',\n      md: 'h-2.5 w-2.5',\n      lg: 'h-3 w-3',\n      xl: 'h-4 w-4',\n    }\n\n    const statusColors = {\n      online: 'bg-green-500',\n      offline: 'bg-gray-400',\n      away: 'bg-yellow-500',\n      busy: 'bg-red-500',\n    }\n\n    const handleImageError = () => {\n      setImageError(true)\n      setImageLoaded(false)\n    }\n\n    const handleImageLoad = () => {\n      setImageLoaded(true)\n      setImageError(false)\n    }\n\n    const shouldShowImage = src && !imageError\n    const shouldShowFallback = !shouldShowImage || !imageLoaded\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative inline-flex items-center justify-center overflow-hidden bg-muted font-medium',\n          sizes[size],\n          shape === 'circle' ? 'rounded-full' : 'rounded-md',\n          className\n        )}\n        {...props}\n      >\n        {shouldShowImage && (\n          <img\n            src={src}\n            alt={alt}\n            className=\"h-full w-full object-cover\"\n            onError={handleImageError}\n            onLoad={handleImageLoad}\n            style={{ display: imageLoaded ? 'block' : 'none' }}\n          />\n        )}\n        \n        {shouldShowFallback && (\n          <span className=\"text-muted-foreground\">\n            {fallback || (alt ? alt.charAt(0).toUpperCase() : '?')}\n          </span>\n        )}\n\n        {showStatus && status && (\n          <span\n            className={cn(\n              'absolute bottom-0 right-0 block rounded-full border-2 border-background',\n              statusSizes[size],\n              statusColors[status]\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n)\n\nAvatar.displayName = 'Avatar'\n\nexport { Avatar }"